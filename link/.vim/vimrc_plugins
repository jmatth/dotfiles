"-------------------------------------------------------------------------------
" Load plugins and set up mappings and options
"-------------------------------------------------------------------------------
" Minimum requirements for plugins
if version < 702 || !has('autocmd')
    echoerr 'This vim is to old for plugins :(.'
    finish
endif

" Check for python support {2
if (has('python') || has('python3'))
    " Grab the python version if we don't already have it
    if !exists('g:Python_System_Ver')
    " Begin ugly, unindented python interpolation
    python <<
from sys import version_info
from vim import command as vimcmd
vimcmd('let g:Python_System_Ver=%d%d%d' % version_info[0:3])
.
    endif
else
    let g:Python_System_Ver=0
endif

" Check if we need to install neobundle {2
let s:bundle_init=0
let s:bundle_readme=expand('~/.vim/bundle/neobundle.vim/README.md')
if !filereadable(s:bundle_readme)
    echo "Installing neobundle..\n"
    if !isdirectory(expand('~/.vim/bundle'))
        call mkdir(expand('~/.vim/bundle'), 'p')
    endif
    silent !git clone git://github.com/Shougo/neobundle.vim.git
                \ ~/.vim/bundle/neobundle.vim
    let s:bundle_init=1
endif

" Setup neobundle {2
filetype off
if has('vim_starting')
    set runtimepath+=~/.vim/bundle/neobundle.vim/
endif
let $GIT_SSL_NO_VERIFY = 'true'              " Don't use SSL
let g:neobundle_default_git_protocol = 'git' " Use git:// over http://

" Required
call neobundle#begin(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'  "}

" Core {1
NeoBundle 'chrisbra/SudoEdit.vim'
NeoBundle 'Shougo/vimproc', { 'build' :
                                \ {
                                    \ 'windows': 'make -f make_mingw32.mak',
                                    \ 'cygwin': 'make -f make_cygwin.mak',
                                    \ 'mac': 'make -f make_mac.mak',
                                    \ 'unix': 'make -f make_unix.mak',
                                \ },
                            \ }
NeoBundleLazy 'Shougo/unite.vim', {'autoload':{'commands':'Unite', 'insert': 1}}  "{
    let bundle = neobundle#get('unite.vim')
    function! bundle.hooks.on_source(bundle)
        call unite#filters#matcher_default#use(['matcher_fuzzy'])
        call unite#filters#sorter_default#use(['sorter_rank'])
        " call unite#set_profile('files', 'smartcase', 1)
        " call unite#custom#profile('files', 'context.smartcase', 1)
    endfunction
    unlet bundle
    if executable('ag')
        let g:unite_source_grep_command='ag'
        let g:unite_source_grep_default_opts=
          \ '--line-numbers --nocolor --nogroup --hidden --ignore ' .
          \ '".hg" --ignore ".svn" --ignore ".git" --ignore ".bzr"'
        let g:unite_source_grep_recursive_opt=''
    elseif executable('ack')
        let g:unite_source_grep_command='ack'
        let g:unite_source_grep_default_opts='--no-heading --no-color -a'
        let g:unite_source_grep_recursive_opt=''
    endif
    let g:unite_data_directory=expand('~/.vim/unite')
    let g:unite_split_rule='botright'
    let g:unite_winheight=10
    nmap <Leader> [unite]
    nnoremap [unite] <nop>
    nnoremap <silent> [unite]f :Unite -start-insert -buffer-name=files
                \ -toggle file_rec/async<CR>
    nnoremap <silent> [unite]F :Unite -start-insert -buffer-name=files
                \ -toggle file_rec/async:!<CR>
    nnoremap <silent> [unite]b :Unite -buffer-name=buffers -toggle
                \ buffer<CR>
    nnoremap <silent> [unite]i :Unite -log -vertical -direction=topleft
                \ neobundle/install<CR>
    nnoremap <silent> [unite]iu :Unite -log -vertical -direction=topleft
                \ neobundle/update<CR>
    autocmd FileType unite call s:unite_my_settings()
    function! s:unite_my_settings()
        nmap <buffer> <C-C> <Plug>(unite_exit)
        imap <buffer> <C-C> <Plug>(unite_exit)
        nmap <silent><buffer><expr> <C-H> unite#do_action('split')
        imap <silent><buffer><expr> <C-H> unite#do_action('split')
        nmap <silent><buffer><expr> <C-V> unite#do_action('vsplit')
        imap <silent><buffer><expr> <C-V> unite#do_action('vsplit')
        let b:hideTrailing = 1
    endfunction
"}

" Movement / Editing {1
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-abolish'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'tpope/vim-speeddating'
NeoBundle 'justinmk/vim-sneak'  "{
    nmap <Leader>s <Plug>Sneak_s
    nmap <Leader>S <Plug>Sneak_S
    xmap <Leader>s <Plug>Sneak_s
    xmap <Leader>S <Plug>Sneak_S
    omap <Leader>s <Plug>Sneak_s
    omap <Leader>S <Plug>Sneak_S
    let g:sneak#streak = 1
"}
NeoBundle 'kris89/vim-multiple-cursors'
NeoBundle 'junegunn/vim-easy-align'
NeoBundleLazy 'mbbill/undotree', {'autoload':{'commands':'UndotreeToggle'}}
NeoBundle 'gregsexton/MatchTag'
NeoBundle 'tomtom/tcomment_vim'  "{
    xmap gcb :TCommentBlock<CR>
    xmap gcc :TComment<CR>
"}
NeoBundle 'haya14busa/incsearch.vim'  "{
    map /  <Plug>(incsearch-forward)
    map ?  <Plug>(incsearch-backward)
    map g/ <Plug>(incsearch-stay)
"}
" NeoBundle 'Raimondi/delimitMate'  "{
"     " expand space and cr inside pairs
"     let g:delimitMate_expand_cr    = 1
"     let g:delimitMate_expand_space = 1
"     " fix triple quoted strings in python
"     au FileType python let b:delimitMate_nesting_quotes = ["'"]
" "}

" Development {1
NeoBundle 'tpope/vim-fugitive', { 'augroup' : 'fugitive'}
NeoBundle 'scrooloose/syntastic'  "{
    let g:syntastic_mode_map = { "mode": "passive",
                               \ "active_filetypes": [],
                               \ "passive_filetypes": [] }

    let g:syntastic_python_checkers = ['flake8', 'python']
"}
NeoBundle 'majutsushi/tagbar'  "{
    nnoremap <silent> <Leader>t :TagbarOpenAutoClose<CR>
"}
NeoBundleLazy 'kien/rainbow_parentheses.vim',  "{
            \ {'autoload':{'filetypes':['lisp', 'scheme']}}
    " Set custom rainbow paren colors
    let g:rbpt_colorpairs = [
        \ ['brown',       'RoyalBlue3'],
        \ ['Darkblue',    'SeaGreen3'],
        \ ['darkgray',    'DarkOrchid3'],
        \ ['darkgreen',   'firebrick3'],
        \ ['darkred',     'SeaGreen3'],
        \ ['darkcyan',    'RoyalBlue3'],
        \ ['darkmagenta', 'DarkOrchid3'],
        \ ['grey',        'RoyalBlue3'],
        \ ['brown',       'firebrick3'],
        \ ['darkgray',    'SeaGreen3'],
        \ ['darkmagenta', 'DarkOrchid3'],
        \ ['Darkblue',    'firebrick3'],
        \ ['darkgreen',   'RoyalBlue3'],
        \ ['darkred',     'DarkOrchid3'],
        \ ['darkcyan',    'SeaGreen3'],
        \ ['red',         'firebrick3'],
        \ ]
"}

" Support for extra filetypes {1
NeoBundleLazy 'digitaltoad/vim-jade', {'autoload':{'filetypes':['jade']}}
NeoBundleLazy 'saltstack/salt-vim', {'autoload':{'filetypes':['sls']}}
NeoBundleLazy 'wavded/vim-stylus', {'autoload':{'filetypes':['stylus']}}
NeoBundleLazy 'fatih/vim-go', {'autoload':{'filetypes':['go']}}  "{
    let g:go_disable_autoinstall = 1
"}
" NeoBundleLazy 'jnwhiteh/vim-golang', {'autoload':{'filetypes':['go']}}

" Python Dependent {1
if g:Python_System_Ver >= 260
    NeoBundle 'editorconfig/editorconfig-vim'
    " NeoBundle 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
    NeoBundle 'SirVer/ultisnips'  "{
        " Name used by some snippets
        let g:snips_author = 'Josh Matthews'
        let g:UltiSnipsExpandTrigger="<c-j>"
        imap <C-l> <ESC>:Unite -start-insert ultisnips<CR>
    "}
    NeoBundle 'honza/vim-snippets'
    NeoBundleLazy 'Rip-Rip/clang_complete', {'build':
                                        \ {
                                            \ 'unix': 'make',
                                            \ 'mac': 'make',
                                        \ },
                                    \ 'autoload':
                                        \ {
                                            \ 'filetypes': ['c', 'cpp']
                                        \ }
                                    \ }
    NeoBundleLazy 'davidhalter/jedi-vim', {'autoload':{'filetypes':['python']}}
else
    NeoBundle 'Shougo/neosnippet'  "{
        " Plugin key-mappings.
        imap <C-j>     <Plug>(neosnippet_expand_or_jump)
        smap <C-j>     <Plug>(neosnippet_expand_or_jump)
        xmap <C-j>     <Plug>(neosnippet_expand_target)
        imap <C-l>     <Plug>(neosnippet_start_unite_snippet)

        " SuperTab like snippets behavior.
        " imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
        "             \ "\<Plug>(neosnippet_expand_or_jump)"
        "             \: pumvisible() ? "\<C-n>" : "\<TAB>"
        " smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
        "             \ "\<Plug>(neosnippet_expand_or_jump)"
        "             \: "\<TAB>"

        " For snippet_complete marker.
        if has('conceal')
            set conceallevel=2 concealcursor=i
        endif
    "}
endif

" Lua Dependent {1
if has('lua')
    NeoBundle 'Shougo/neocomplete.vim'  "{
        " autocmd FileType * if &ft != "c"| NeoBundleSource neocomplete.vim| endif
        " Disable AutoComplPop.
        let g:acp_enableAtStartup = 0
        " Use neocomplete.
        let g:neocomplete#enable_at_startup = 1
        " Use smartcase.
        let g:neocomplete#enable_smart_case = 1
        " Set minimum syntax keyword length.
        let g:neocomplete#sources#syntax#min_keyword_length = 3
        let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
        " Don't autoclose preview window
        let g:neocomplete#enable_auto_close_preview = 0
        let g:jedi#auto_close_doc = 0

        " Define dictionaries.
        let g:neocomplete#sources#dictionary#dictionaries = {
            \ 'default' : '',
            \ 'vimshell' : $HOME.'/.vimshell_hist',
            \ 'scheme' : $HOME.'/.gosh_completions'
                \ }

        " Define keyword.
        if !exists('g:neocomplete#keyword_patterns')
            let g:neocomplete#keyword_patterns = {}
        endif
        let g:neocomplete#keyword_patterns['default'] = '\h\w*'

        " Plugin key-mappings.
        inoremap <expr><C-g>     neocomplete#undo_completion()
        " inoremap <expr><C-l>     neocomplete#complete_common_string()

        " Recommended key-mappings.
        " <CR>: close popup and save indent.
        inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
        function! s:my_cr_function()
            return neocomplete#close_popup() . "\<CR>"
            " For no inserting <CR> key.
            " return pumvisible() ? neocomplete#close_popup() : "\<CR>"
        endfunction
        " <TAB>: completion.
        inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
        " <C-h>, <BS>: close popup and delete backword char.
        inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
        " inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
        inoremap <expr><C-y>  neocomplete#close_popup()
        inoremap <expr><C-e>  neocomplete#cancel_popup()
        " Close popup by <Space>.
        "inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

        " For cursor moving in insert mode(Not recommended)
        "inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
        "inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
        "inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
        "inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
        " Or set this.
        "let g:neocomplete#enable_cursor_hold_i = 1
        " Or set this.
        "let g:neocomplete#enable_insert_char_pre = 1

        " AutoComplPop like behavior.
        "let g:neocomplete#enable_auto_select = 1

        " Shell like behavior(not recommended).
        "set completeopt+=longest
        "let g:neocomplete#enable_auto_select = 1
        "let g:neocomplete#disable_auto_complete = 1
        "inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

        " Fix <Plug> garbage with multiple cursors
        function! Multiple_cursors_before()
            exe 'NeoCompleteLock'
        endfunction

        function! Multiple_cursors_after()
            exe 'NeoCompleteUnlock'
        endfunction

        " Enable omni completion.
        augroup neocompleteFileTypes
            au!
            autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
            autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
            autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
            autocmd FileType python setlocal omnifunc=jedi#completions
            autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
        augroup end

        " Enable heavy omni completion.
        if !exists('g:neocomplete#sources#omni#input_patterns')
            let g:neocomplete#sources#omni#input_patterns = {}
        endif
        "let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
        "let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
        "let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

        " For perlomni.vim setting.
        " https://github.com/c9s/perlomni.vim
        let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

        if !exists('g:neocomplete#force_omni_input_patterns')
        let g:neocomplete#force_omni_input_patterns = {}
        endif
        let g:neocomplete#force_overwrite_completefunc = 1
        let g:neocomplete#force_omni_input_patterns.c =
            \ '[^.[:digit:] *\t]\%(\.\|->\)\w*'
        let g:neocomplete#force_omni_input_patterns.cpp =
            \ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
        let g:neocomplete#force_omni_input_patterns.objc =
            \ '[^.[:digit:] *\t]\%(\.\|->\)\w*'
        let g:neocomplete#force_omni_input_patterns.objcpp =
            \ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
        let g:neocomplete#force_omni_input_patterns.python =
        \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'

        let g:clang_complete_auto = 0
        let g:clang_auto_select = 0
        let g:clang_use_library = 1

        let g:jedi#completions_enabled = 0
        let g:jedi#auto_vim_configuration = 0
    "}
endif

" Fun Extras {1
NeoBundle 'bling/vim-airline'  "{
    let g:airline_powerline_fonts = 1
"}
NeoBundleLazy 'Shougo/vimshell.vim', {'autoload':{'commands':'VimShell'}}
NeoBundle 'Shougo/vimfiler.vim'  "{
    let g:vimfiler_as_default_explorer = 1
    nnoremap [unite]d :VimFilerExplorer<CR>
"}

" Colorscheme bundles {1
NeoBundle 'ciaranm/inkpot'
NeoBundle 'tomasr/molokai'
NeoBundle 'tpope/vim-vividchalk'
NeoBundle 'w0ng/vim-hybrid'
NeoBundle 'vim-scripts/corporation'
NeoBundle 'whatyouhide/vim-gotham'
NeoBundle 'chriskempson/tomorrow-theme', {'rtp': 'vim/'}

call neobundle#end()

" Install bundles if this is the first run {2
if s:bundle_init
    let s:previous_more = &more
    set nomore
    NeoBundleCheck
    if s:previous_more| set more| endif
    unlet s:previous_more
endif


" Turn filetype back on
filetype plugin indent on

" vim: set tw=78 foldlevel=1 foldmarker={,} foldminlines=2 foldmethod=marker:
