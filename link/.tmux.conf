# ~/.tmux.conf
#
# if "which reattach-to-user-namespace" \
#     "set-option -g default-command 'reattach-to-user-namespace -l zsh'" \
#     "set-option -g default-command 'zsh'"

set-option -g default-command "which reattach-to-user-namespace &> /dev/null && reattach-to-user-namespace -l $SHELL || $SHELL"

set -g default-terminal xterm-256color
set -ga terminal-overrides ",*256col*:Tc"

# Set prefix key to Ctrl-a
unbind-key C-b
set-option -g prefix C-a

# send the prefix to client inside window
bind-key C-a send-prefix

#### Start COLOUR (Solarized dark)

# default statusbar colors
set-option -g status-style bg=black,fg=yellow
# set-option -g status-attr default

# default window title colors
set-window-option -g window-status-style fg=terminal,bg=default
#set-window-option -g window-status-attr dim

# active window title colors
set-window-option -g window-status-current-style fg=brightred,bg=default
#set-window-option -g window-status-current-attr bright

# pane border
set-option -g pane-border-style fg=black
set-option -g pane-active-border-style fg=brightblack #base01

# message text
set-option -g message-style bg=black #base02
set-option -g message-style fg=brightred #orange

# pane number display
set-option -g display-panes-active-colour blue #blue
set-option -g display-panes-colour brightred #orange

# clock
set-window-option -g clock-mode-colour green #green

#### End COLOUR (Solarized dark)

# Statusbar layout
set -g status-right "%a  %m/%d/%Y  %R  #(rainbarf --bg black --width 15 --remaining)"
# set -g status-right "#(rainbarf --bg black --width 15 --remaining)#[fg=blue,bg=black]#[bg=blue,fg=white] %a  %m/%d/%Y  %R"
set -g status-right-length 50
set -g status-left-length 50
setw -g window-status-format "#I:#W"
setw -g window-status-current-format "#I:#W"

# set -g status-left "#[bg=blue,fg=white]#h#[bg=brightmagenta,fg=blue]#[bg=brightmagenta,fg=white]#S#[bg=black,fg=brightmagenta]>"
set -g status-left "#[bg=green,fg=white] #S:#I.#P#[bg=blue,fg=green]#[bg=blue,fg=white]#h#[bg=black,fg=blue]"
# set -g status-left "#[bg=blue,fg=white]#h#[bg=black,fg=blue]"

# use vi-style key bindings in the status line
set -g status-keys vi

# are displayed. time is in milliseconds.
set -g display-time 5000

# Time to wait for repeating keybindings
set -g repeat-time 700

# Time to display pane numbers
set -g display-panes-time 3000

# Don't wait to send escape
set -g escape-time 0

# instructs tmux to expect UTF-8 sequences
# setw -g utf8 on
# set -g utf8 on

# vi-style controls for copy mode
setw -g mode-keys vi

# listen for activity on all windows
set -g bell-action any

# open a man page in new window
bind-key / command-prompt "split-window 'exec man %%'"

# scrollback buffer n lines
set -g history-limit 10000

# start window indexing at 1
set -g base-index 1

# tell tmux to use 256 colour terminal
# set -g default-terminal "xterm-256color"

# xterm-style function key sequences
setw -g xterm-keys on

# control automatic window renaming
setw -g automatic-rename on

# disable wm window titles
set -g set-titles off


# Key bindings

# Better Colemak bindings
bind-key -T copy-mode-vi h send-keys -X cursor-up
bind-key -T copy-mode-vi k send-keys -X cursor-down
bind-key -T copy-mode-vi j send-keys -X cursor-left

bind-key P run-shell "tmux showb | pbcopy"

# reload settings
bind-key R source-file ~/.tmux.conf \; display-message "Config reloaded..."

# Don't insert current name when renaming window
bind-key , command-prompt "rename-window %%"

# Re-enable automatic window renaming on current window
bind-key M-, setw automatic-rename on

# detach client
bind-key d detach

# choose a client to detach
bind-key D choose-client

# choose window/session
bind-key "'" choose-window
bind-key '"' choose-session

# Choose a buffer to paste from
bind-key "#" choose-buffer

# Start window/pane navigation

# navigate windows using HL
# bind-key -r H prev
# bind-key -r L next
bind-key -r J prev
bind-key -r L next

# swap windows using Alt-H and Alt-L
# bind-key -r C-h swap-window -t -1
# bind-key -r C-l swap-window -t +1
bind-key -r C-j swap-window -d -t -1
bind-key -r C-l swap-window -d -t +1

# navigate panes using hjkl
# bind-key h select-pane -L
# bind-key j select-pane -D
# bind-key k select-pane -U
# bind-key l select-pane -R
bind-key j select-pane -L
bind-key k select-pane -D
bind-key h select-pane -U
bind-key l select-pane -R

# swap panes using Alt-j and Alt-k
# bind-key -n M-j swap-pane -D
# bind-key -n M-k swap-pane -U
bind-key -n M-k swap-pane -D
bind-key -n M-h swap-pane -U

# change window layouts
bind-key -r Space next-layout
bind-key -r S-Space previous-layout

# Create new window
bind-key -n C-Space new-window -c "#{pane_current_path}"

# End window/pane navigation

# Enable mouse integration
# setw -g mode-mouse on
# set -g mouse-select-window on
# set -g mouse-select-pane on
# set -g mouse-resize-pane on
setw -g mouse on


# Better visuals for split-window
bind-key - split-window -v -c "#{pane_current_path}"
bind-key \\ split-window -h -c "#{pane_current_path}"

# Clear scrollback
bind-key C clear

# Start ssh specialized keybindings

# split window and log directly into server
# bind-key C command-prompt "new-window -n %1 'exec ssh $(echo %1 | tr \'[A-Z]\' \'[a-z]\')'"

# use Control-key to split window and ssh from command prompt
bind-key _ command-prompt -I "#W" "split-window -v 'exec ssh $(echo %% | tr \'[A-Z]\' \'[a-z]\')'"
bind-key | command-prompt -I "#W" "split-window -h 'exec ssh $(echo %% | tr \'[A-Z]\' \'[a-z]\')'"

# Start ssh specialized keybindings

# resize panes like vim
bind-key -r < resize-pane -L 3
bind-key -r > resize-pane -R 3
bind-key -r + resize-pane -U 1
bind-key -r = resize-pane -D 1

# End ssh specialized keybindings
